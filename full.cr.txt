====================
FILE: ConnectionPool.java

package connection_pool;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import data.DatabaseConnection;
import lombok.Getter;
import lombok.extern.log4j.Log4j2;

@Log4j2
@Getter
public class ConnectionPool {
    private final int minPoolSize;
    private final int maxPoolSize;
    private List<Connection> pool;
    private Semaphore semaphore;
    private Lock lock;
    private ScheduledExecutorService scheduler;

    public ConnectionPool(int minPoolSize, int maxPoolSize) {
        this.minPoolSize = minPoolSize;
        this.maxPoolSize = maxPoolSize;
        this.pool = new ArrayList<>();
        this.semaphore = new Semaphore(maxPoolSize, true);
        this.lock = new ReentrantLock();
        initPool();
    }

    private void initPool()  {
        lock.lock();
        try {
            for (int i = 0; i < minPoolSize; i++) {
                pool.add(new DatabaseConnection().getConnection());
                System.out.println("A new connection added to POOL");
            }
        } catch (SQLException ex) {
            System.out.println("Error initializing connection POOL");
        } finally {
            lock.unlock();
        }
    }

    public Connection getConnection() throws SQLException {
        try {
            semaphore.acquire();
            lock.lock();
            try {
                for (Connection conn: pool) {
                    if (!conn.isClosed()) {
                        pool.remove(conn);
                        System.out.println(Thread.currentThread() + " got a connection from the POOL");
                        return conn;
                    }
                }
                if (pool.size() < maxPoolSize) {
                    Connection newConn = new DatabaseConnection().getConnection();
                    pool.add(newConn);
                    System.out.println(Thread.currentThread() + " added a new connection from the POOL");
                    return newConn;
                } else {
                    throw new SQLException("No available connections");
                }
            } finally {
                lock.unlock();
            }
        } catch (InterruptedException ex) {
            throw new SQLException("Failed to acquire a connection: {} ", ex.getMessage());
        }
    }

    public void releaseConnection(Connection conn) throws SQLException {
        lock.lock();
        try {
            if (!conn.isClosed()) {
                pool.add(conn);
                System.out.println(Thread.currentThread() + " returned the connection to the POOL");
                semaphore.release();
            } else {
                pool.remove(conn);
                System.out.println("Connection with error removed from POOL");
                if (pool.size() < minPoolSize) {
                    pool.add(new DatabaseConnection().getConnection());
                }
            }
        } catch (SQLException ex) {
            pool.remove(conn);
            System.out.println("Connection with error removed from POOL");
            if (pool.size() < minPoolSize) {
                pool.add(new DatabaseConnection().getConnection());
            }
        } finally {
            lock.unlock();
        }
    }

    public void startCleanupScheduler()  {
        System.out.println("Scheduler started");
        scheduler = Executors.newScheduledThreadPool(1);
        scheduler.scheduleAtFixedRate(() -> {
            try {
                removeIdleConnection();
            } catch (Exception ex) {
                System.out.println("Failed to remove connection: " + ex.getMessage());
            }
        }, 0, 1, TimeUnit.MINUTES);
    }

    private void removeIdleConnection() throws SQLException {
        lock.lock();
        try {
            for (Connection conn: pool) {
                if (conn.isClosed() && pool.size() > minPoolSize) {
                    pool.remove(conn);
                    System.out.println(Thread.currentThread() + " removed the idle connection from POOL");
                }
            }
        } finally {
            lock.unlock();
        }
    }

    public void stopCleanupScheduler() throws InterruptedException {
        if (scheduler != null && !scheduler.isShutdown()) {
            scheduler.shutdown();
            try {
                if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {
                    scheduler.shutdownNow();
                }
            } catch (InterruptedException ex) {
                System.out.println("Scheduler shut down");
                scheduler.shutdownNow();
            }
        }
    }
}

====================
FILE: DatabaseConnection.java

package data;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import lombok.extern.log4j.Log4j2;

@Log4j2
public class DatabaseConnection {
    private final String USER = "user_manager";
    private final String PASSWORD = "user123";
    private final String DATABASE = "user_db";
    private final int PORT_NUMBER = 5432;
    private final String URL = String.format("jdbc:postgresql://localhost:%d/%s", PORT_NUMBER, DATABASE);
    private static Connection connection;

    public Connection getConnection() throws SQLException {
        if (connection == null || connection.isClosed()) {
            try {
                log.info("Attempting to connect to the data");
                connection = DriverManager.getConnection(URL, USER, PASSWORD);
                log.info("Connection established with {} on port {}", DATABASE, PORT_NUMBER);
            } catch (SQLException ex) {
                log.error("Error during data connection: {}", ex.getMessage());
                throw ex;
            }
        }
        return connection;
    }

    public void disconnect() {
        try {
            if (connection != null) {
                connection.close();
                log.info("Database disconnected");
            }
        } catch(SQLException ex){
            log.error("Error during data disconnection: {}", ex.getMessage());
        }
    }
}

====================
FILE: ConnectionPoolPerformanceTest.java

package performance_test;

import connection_pool.ConnectionPool;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * The ConnectionPoolTest is designed to test the performance and stability of the connection pool.
 * Its primary purpose is to simulate a large number of concurrent data operations using a specified number
 * of connections from the pool.
 *
 * This class demonstrates the ability of the connection pool to handle simultaneous queries and manage
 * connection availability and performance.
 */

class ConnectionPoolPerformanceTest {
    int minPoolSize = 10;
    int maxPoolSize = 100;
    int threadsNumber = 200;
    long testDurationInSeconds = 30;
    ConnectionPool connectionPool;

    @BeforeEach
    void setUp() {
        connectionPool = new ConnectionPool(minPoolSize, maxPoolSize);
        connectionPool.startCleanupScheduler();
    }

    @AfterEach
    void tearDown() throws InterruptedException {
        connectionPool.stopCleanupScheduler();
    }

    @Test
    @DisplayName("Should handle multiple concurrent data operations with connection pool")
    void shouldHandleConcurrentDatabaseOperations() throws InterruptedException {
        // Create task for concurrent performing
        Runnable task = createTask(connectionPool);
        ExecutorService executor = Executors.newFixedThreadPool(threadsNumber);

        // Each thread perform operation on the data
        for (int i = 0; i < threadsNumber; i++) {
            executor.submit(task);
        }

        // Shut down the thread operations in specific time
        executor.shutdown();
        boolean finishedInTime = executor.awaitTermination(testDurationInSeconds + 10, TimeUnit.SECONDS);

        assertTrue(finishedInTime, "Test did not finish in set time");
    }


    // Create task take a connection from the pool, perform operation and return the connection to the pool
    private Runnable createTask(ConnectionPool connectionPool) {
        return () -> {
            long endTime = System.currentTimeMillis() + testDurationInSeconds * 1000;
            String query = "INSERT INTO test_table (IP, STATUS) VALUES ('127.0.0.1', 'active');";
            while (System.currentTimeMillis() < endTime) {
                Connection connection = null;
                try {
                    // Get connection
                    connection = connectionPool.getConnection();

                    // Perform operation
                    System.out.println(Thread.currentThread() + " is performing the operation");
                    updateTable(connection, query);
                } catch (SQLException ex) {
                    System.out.println("Exception: " + ex.getMessage());
                    Thread.currentThread().interrupt();
                } finally {
                    if (connection != null) {
                        try {
                            // Return connection to the pool
                            connectionPool.releaseConnection(connection);
                        } catch (SQLException ex) {
                            System.out.println("Failed to release connection: " + ex.getMessage());
                        }
                    }
                }
            }
        };
    }

    void updateTable(Connection conn, String query){
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

====================
FILE: DatabasePerformanceTest.java

package performance_test;

import data.DatabaseConnection;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.sql.*;

import static org.junit.jupiter.api.Assertions.assertTrue;

/**
 * The DatabasePerformanceTest designed to measure and compare the execution time of
 * executing a simple query multiple times using two different strategies:
 * 1. Establishing and closing a connection for each query
 * 2. Using a single connection to execute all queries
 *
 * This class demonstrates the significant performance impact of repeatedly opening and closing
 * data connections versus reusing a single connection.
 */

class DatabasePerformanceTest {
    String query = "INSERT INTO test_table (IP, STATUS) VALUES ('127.0.0.1', 'active');";
    int operationNumber = 300;

    @Test
    @DisplayName("Should test the performance of executing operations with simple connections")
    void shouldTestWithSimpleConnections() {
        long executionTime = executeTestWithSimpleConnections(query);

        assertTrue(executionTime > 0, "Testing time with simple connections should be > 0");
        System.out.println("Simple connections test duration: " + executionTime + " ms");
    }
    @Test
    @DisplayName("Should test the performance of executing operations with multiple connections")
    void shouldTestWithMultipleConnections() {
        long executionTime = executeTestWithMultipleConnections(query);

        assertTrue(executionTime > 0, "Testing time with multiple connections should be > 0");
        System.out.println("Multiple connections test duration: " + executionTime + " ms");
    }

    // Executes the test with a new connection for each operation
    long executeTestWithSimpleConnections(String query) {
        long start = System.currentTimeMillis();

        for (int i = 0; i < operationNumber; i++) {
            try {
                DatabaseConnection conn = new DatabaseConnection();
                updateTable(conn.getConnection(), query);
                conn.disconnect();
            } catch (SQLException e) {
                e.printStackTrace();

            }
        }
        long stop = System.currentTimeMillis();
        return stop - start;
    }

    // Executes the test with a single connection for all operations
    long executeTestWithMultipleConnections(String query)  {
        long start = System.currentTimeMillis();
        DatabaseConnection conn = new DatabaseConnection();

        for (int i = 0; i < operationNumber; i++) {
             try {
                 updateTable(conn.getConnection(), query);
             } catch (SQLException e){
                 e.printStackTrace();
             }
        }
        conn.disconnect();

        long stop = System.currentTimeMillis();
        return stop - start;
    }

    void updateTable(Connection conn, String query){
        try (Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(query);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

====================
FILE: ConnectionPoolUnitTest.java

package unit_test;

import connection_pool.ConnectionPool;
import org.junit.jupiter.api.*;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class ConnectionPoolUnitTest {
    ConnectionPool pool;
    int minPoolSize = 10;
    int maxPoolSize = 100;

    @BeforeEach
    void setUp(){
        pool = new ConnectionPool(minPoolSize, maxPoolSize);
    }

    @Test
    @DisplayName("Should test if the initial connection pool contains the minimum number of connections")
    void testInitPool(){
        List<Connection> newPool = pool.getPool();

        assertEquals(newPool.size(), pool.getPool().size());
        assertFalse(newPool.size() != 10);
        assertNotNull(newPool);
    }

    @Test
    @DisplayName("Should test connection acquisition using getConnection() from the pool")
    void testGetConnectionAcquisition() throws SQLException {
        Connection conn = null;

        // Getting initial 10 connections from pool
        for (int i = 0; i < 10; i++) {
            conn = pool.getConnection();
        }

        // Ensure that the last acquired connection is not null
        assertNotNull(conn);
    }

    @Test
    @DisplayName("Should test connection removal using getConnection() from the pool")
    void testGetConnectionRemoval() throws SQLException {
        Connection conn = null;

        // Getting initial 10 connections from pool
        for (int i = 0; i < 10; i++) {
            conn = pool.getConnection();
        }

        // Ensure that the acquired connection is removed from the pool
        assertFalse(pool.getPool().contains(conn));
    }

    @Test
    @DisplayName("Should test if connection is returned to the pool")
    void testReleaseConnection() throws SQLException {
        Connection conn = pool.getConnection();

        pool.releaseConnection(conn);

        assertTrue(pool.getPool().contains(conn));
    }


}

====================
FILE: DatabaseConnectionUnitTest.java

package unit_test;

import data.DatabaseConnection;
import org.junit.jupiter.api.*;

import java.sql.Connection;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;

class DatabaseConnectionUnitTest {
    static DatabaseConnection databaseConnection;
    Connection connection;
    @BeforeEach
    void setUp(){
       databaseConnection = new DatabaseConnection();
    }

    @AfterAll
    static void closeDown() {
        databaseConnection.disconnect();
    }

    @Test
    @DisplayName("Should test data base connection return")
    void testGetConnection() throws SQLException {
        connection = databaseConnection.getConnection();

        assertNotNull(connection);
    }
    @Test
    @DisplayName("Should test if is data base connection opened")
    void testIsConnectionOpened() throws SQLException {
        connection = databaseConnection.getConnection();

        assertFalse(connection.isClosed());
    }
}

